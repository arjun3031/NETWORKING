# utils.py

from django.conf import settings
from django.core.mail import EmailMessage
from django.template.loader import render_to_string
from django.utils.html import strip_tags
import logging
import re

logger = logging.getLogger(__name__)

def get_client_ip(request):
    """Get the client's IP address from the request"""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


def sanitize_text(text):
    """Remove potentially harmful content from text"""
    # Remove HTML tags
    text = strip_tags(text)
    
    # Remove script-like patterns
    text = re.sub(r'<script.*?</script>', '', text, flags=re.IGNORECASE | re.DOTALL)
    text = re.sub(r'javascript:', '', text, flags=re.IGNORECASE)
    text = re.sub(r'on\w+\s*=', '', text, flags=re.IGNORECASE)
    
    return text.strip()


def send_contact_email(name, email, message, contact_instance=None):
    """
    Send contact form email to the site owner
    
    Args:
        name: Sender's name
        email: Sender's email
        message: Message content
        contact_instance: ContactMessage model instance (optional)
    
    Returns:
        bool: True if email sent successfully, False otherwise
    """
    try:
        # Sanitize inputs
        name = sanitize_text(name)
        message = sanitize_text(message)
        
        # Get receiver email from settings
        receiver_email = getattr(settings, 'CONTACT_EMAIL_RECEIVER', settings.EMAIL_HOST_USER)
        
        # Prepare email subject
        subject = f'Portfolio Contact: Message from {name}'
        
        # Prepare email body (plain text)
        email_body = f"""
New Contact Form Submission

From: {name}
Email: {email}
Submitted: {contact_instance.submitted_at if contact_instance else 'N/A'}

Message:
{message}

---
This is an automated message from your portfolio contact form.
DO NOT reply directly to this email. Use the sender's email address above.
"""
        
        # Create email message
        email_message = EmailMessage(
            subject=subject,
            body=email_body,
            from_email=settings.DEFAULT_FROM_EMAIL,  # Your verified email
            to=[receiver_email],  # Your receiving email
            reply_to=[email],  # Set user's email as reply-to
            headers={
                'X-Mailer': 'Portfolio Contact Form',
                'X-Sender-IP': contact_instance.ip_address if contact_instance else 'N/A'
            }
        )
        
        # Send email
        email_message.send(fail_silently=False)
        
        # Update contact instance if provided
        if contact_instance:
            contact_instance.is_sent = True
            contact_instance.save()
        
        logger.info(f"Contact email sent successfully from {email}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send contact email from {email}: {str(e)}")
        if contact_instance:
            contact_instance.is_sent = False
            contact_instance.save()
        return False


def send_html_contact_email(name, email, message, contact_instance=None):
    """
    Send contact form email with HTML template
    Note: Create 'contact_email.html' template in your templates folder
    """
    try:
        name = sanitize_text(name)
        message = sanitize_text(message)
        
        receiver_email = getattr(settings, 'CONTACT_EMAIL_RECEIVER', settings.EMAIL_HOST_USER)
        subject = f'Portfolio Contact: Message from {name}'
        
        # Context for email template
        context = {
            'name': name,
            'email': email,
            'message': message,
            'submitted_at': contact_instance.submitted_at if contact_instance else None,
            'ip_address': contact_instance.ip_address if contact_instance else 'N/A'
        }
        
        # Render HTML email
        html_message = render_to_string('emails/contact_email.html', context)
        plain_message = strip_tags(html_message)
        
        email_message = EmailMessage(
            subject=subject,
            body=plain_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[receiver_email],
            reply_to=[email]
        )
        
        email_message.content_subtype = 'html'
        email_message.body = html_message
        email_message.send(fail_silently=False)
        
        if contact_instance:
            contact_instance.is_sent = True
            contact_instance.save()
        
        logger.info(f"HTML contact email sent successfully from {email}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send HTML contact email from {email}: {str(e)}")
        if contact_instance:
            contact_instance.is_sent = False
            contact_instance.save()
        return False


def verify_recaptcha(recaptcha_response):
    """
    Verify Google reCAPTCHA response
    
    Args:
        recaptcha_response: The reCAPTCHA response token
    
    Returns:
        bool: True if verification successful, False otherwise
    """
    if not getattr(settings, 'RECAPTCHA_PRIVATE_KEY', None):
        return True  # Skip if reCAPTCHA not configured
    
    try:
        import requests
        
        payload = {
            'secret': settings.RECAPTCHA_PRIVATE_KEY,
            'response': recaptcha_response
        }
        
        response = requests.post(
            'https://www.google.com/recaptcha/api/siteverify',
            data=payload,
            timeout=5
        )
        
        result = response.json()
        return result.get('success', False)
        
    except Exception as e:
        logger.error(f"reCAPTCHA verification failed: {str(e)}")
        return False